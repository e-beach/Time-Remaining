(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/platform-browser'), require('@angular/forms'), require('moment')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/platform-browser', '@angular/forms', 'moment'], factory) :
    (factory((global.ng2-datepicker = global.ng2-datepicker || {}),global.ng.core,global.ng.common,global.ng.platformBrowser,global.ng.forms,global.moment));
}(this, (function (exports,_angular_core,_angular_common,_angular_platformBrowser,_angular_forms,moment) { 'use strict';

moment = 'default' in moment ? moment['default'] : moment;

function __extends(d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __metadata(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
}

(function (DateState) {
    DateState[DateState["disabled"] = 0] = "disabled";
    DateState[DateState["enabled"] = 1] = "enabled";
    DateState[DateState["inRange"] = 2] = "inRange";
    DateState[DateState["selected"] = 3] = "selected"; //active is also selected and enabled
})(exports.DateState || (exports.DateState = {}));

var BaseSelect = (function () {
    function BaseSelect() {
        this._value = this.EMPTY_VALUE;
        /*@Output()*/
        this.onDateChange = new _angular_core.EventEmitter();
        this.onStateChange = function () { };
        /* we're kinda doing our own change detection because some inputs
         * may be changed directly by template and not through property binding.
         * Such change are not covered by Angular change detection.
         *
         * We just want to know if something has changed not what has changed so
         * a boolean flag is enough
         */
        this.hasStateChanged = false;
    }
    /**
     * Extend the base configuration needed by @Directive
     * @param {Directive} config           subclass configuration
     * @param {Function}  directiveClasses subclass
     * @param {any[]}     ...a             useless just to please compiler if subclass wants to add parameter
     */
    //TODO the ...a trick works to keep compiler quiet but this will be transpiled into unseless code
    BaseSelect.extendConfig = function (config, directiveClasses) {
        var a = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            a[_i - 2] = arguments[_i];
        }
        return extendDirConfig({
            //we could auto-generate it using gulp or something
            inputs: ['minDate', 'maxDate'],
            outputs: ['onDateChange'],
            providers: [selectProvider(directiveClasses)],
        }, config);
    };
    Object.defineProperty(BaseSelect.prototype, "EMPTY_VALUE", {
        get: function () { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseSelect.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Set the value without any check (except null) and emit an onDateChange event
         * @param {T} value
         */
        set: function (value) {
            if (value !== this._value) {
                this.onDateChange.emit(this._value = value || this.EMPTY_VALUE);
                this.hasStateChanged = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseSelect.prototype, "minDate", {
        /*@Input()*/
        get: function () {
            return this._minDate;
        },
        set: function (date) {
            this._minDate = date;
            this.hasStateChanged = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseSelect.prototype, "maxDate", {
        /*@Input()*/
        get: function () {
            return this._maxDate;
        },
        set: function (date) {
            this._maxDate = date;
            this.hasStateChanged = true;
        },
        enumerable: true,
        configurable: true
    });
    BaseSelect.prototype.registerOnStateChange = function (fn) {
        this.onStateChange = fn;
    };
    BaseSelect.prototype.ngDoCheck = function () {
        if (this.hasStateChanged)
            this.onStateChange();
        this.hasStateChanged = false;
    };
    /**
     * Return a date corresponding to the day of the input date.
     * We don't want to introduce time in our dates.
     * @param  {moment.Moment} date A date that may have time in it
     * @return {moment.Moment}      A date corresponding to a day with all time unit to 0.
     */
    BaseSelect.prototype.getDay = function (date) {
        return date ? moment([date.year, date.month, date.date]) : null;
    };
    /** Returns true when date is between minDate and maxDate */
    BaseSelect.prototype.isDateValid = function (date) {
        return date &&
            (!this.minDate || date.isSameOrAfter(this.minDate)) &&
            (!this.maxDate || date.isSameOrBefore(this.maxDate));
    };
    /**
     * return true if date is selectable meaning :
     *  - not null
     *  - valid
     *  - not already selected
     * Primarly meant to be used by selectDate() of subclass
     * @param  {moment.Moment} date [description]
     * @return {boolean}            [description]
     */
    BaseSelect.prototype.isDateSelectable = function (date) {
        return date && this.isDateValid(date) && !this.isDateSelected(date);
    };
    BaseSelect.prototype.getDateState = function (date) {
        if (!date)
            return exports.DateState.disabled;
        if (this.isDateSelected(date))
            return exports.DateState.selected;
        if (this.isDateInSelectRange(date))
            return exports.DateState.inRange;
        if (this.isDateValid(date))
            return exports.DateState.enabled;
    };
    return BaseSelect;
}());
//helper
function isSameDay(date1, date2) {
    if (date1 && date2)
        return date1.isSame(date2, 'd');
    return false;
}

function concatArr(defaultArr, newArr) {
    return defaultArr ?
        (newArr ? defaultArr.concat(newArr) : defaultArr) :
        newArr;
}
function extendDirConfig(defaultConfig, config) {
    return {
        providers: concatArr(defaultConfig.providers, config.providers),
        inputs: concatArr(defaultConfig.inputs, config.inputs),
        outputs: concatArr(defaultConfig.outputs, config.outputs),
        queries: Object.assign({}, defaultConfig.queries, config.queries),
        host: Object.assign({}, defaultConfig.host, config.host),
        selector: config.selector || defaultConfig.selector,
        exportAs: config.exportAs || defaultConfig.exportAs,
    };
}
function extendConfig(defaultConfig, config) {
    return Object.assign(extendDirConfig(defaultConfig, config), {
        template: (config.template || config.templateUrl) ? config.template : defaultConfig.template,
        templateUrl: (config.template || config.templateUrl) ? config.templateUrl : defaultConfig.templateUrl,
        styles: (config.styles || config.styleUrls) ? config.styles : defaultConfig.styles,
        styleUrls: (config.styles || config.styleUrls) ? config.styleUrls : defaultConfig.styleUrls,
        moduleId: (config.templateUrl || config.styleUrls) ? config.moduleId :
            ((!config.template && defaultConfig.templateUrl) || (!config.styles && defaultConfig.styleUrls) ?
                defaultConfig.moduleId : undefined),
        viewProviders: concatArr(defaultConfig.viewProviders, config.viewProviders),
        animations: concatArr(defaultConfig.animations, config.animations),
        entryComponents: concatArr(defaultConfig.entryComponents, config.entryComponents),
        changeDetection: config.changeDetection || defaultConfig.changeDetection,
        encapsulation: config.encapsulation || defaultConfig.encapsulation,
        interpolation: config.interpolation || defaultConfig.interpolation
    });
}
function formProvider(componentClass) {
    return {
        provide: _angular_forms.NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function () { return componentClass; }),
        multi: true
    };
}
function selectProvider(directiveClass) {
    return {
        provide: BaseSelect, useExisting: _angular_core.forwardRef(function () { return directiveClass; })
    };
}

var DatePickerTemplate = (function () {
    function DatePickerTemplate(cd, select) {
        var _this = this;
        this.cd = cd;
        this.select = select;
        /*@Input()*/ this.showSixWeek = false;
        this.weekDaysName = moment().localeData().weekdaysShort();
        this.months = [];
        /* Value accessor stuff */
        this.onTouchedCallback = function () { };
        this.onChangeCallback = function () { };
        if (!select)
            throw 'No SelectDirective specified. DatePicker must be coupled with a SelectDirective';
        this.select.registerOnStateChange(function () { _this.updateCalendarDays(); });
        // should we unsubscribe onDestroy since SelectDirective has
        // same lifecycle that this component ?
        this.select.onDateChange.subscribe(function (d) {
            _this.onChangeCallback(d);
        });
    }
    /**
    * Extend the base configuration needed by @Component
    * @param {Component} config           subclass configuration
    * @param {any[]}     ...a             useless just to please compiler if subclass wants to add parameter
    */
    //TODO the ...a trick works to keep compiler quiet but this will be transpiled into unseless code
    DatePickerTemplate.extendConfig = function (config, componentClass) {
        var a = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            a[_i - 2] = arguments[_i];
        }
        return extendConfig({
            //we could auto-generate it using gulp or something
            inputs: ['locale', 'showSixWeek'],
            providers: [formProvider(componentClass)],
            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
        }, config);
    };
    Object.defineProperty(DatePickerTemplate.prototype, "locale", {
        get: function () {
            return this._locale;
        },
        /*@Input()*/ set: function (locale) {
            this._locale = (!locale || locale.length == 0) ? false : locale;
            //with global locale we can call weekdaysShort() with a boolean to get array in locale order
            //unfortunately we can't for local locale, must do it ourselves.
            var localeData = this.applyLocale(moment()).localeData();
            var weekdays = localeData.weekdaysShort();
            // typings not up to date
            this.weekDaysName = weekdays.concat(weekdays.splice(0, localeData.firstDayOfWeek()));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatePickerTemplate.prototype, "month", {
        //helper
        get: function () {
            return this.months[0];
        },
        enumerable: true,
        configurable: true
    });
    // TODO should we check that value match SelectDirective's expected value type ?
    // If so how ?
    // TODO use setValue() ?
    DatePickerTemplate.prototype.writeValue = function (value) {
        this.select.value = value;
    };
    DatePickerTemplate.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    DatePickerTemplate.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    Object.defineProperty(DatePickerTemplate.prototype, "value", {
        /* */
        //helper
        get: function () {
            return this.select.value;
        },
        set: function (v) {
            this.select.value = v;
        },
        enumerable: true,
        configurable: true
    });
    DatePickerTemplate.prototype.applyLocale = function (date) {
        if (this.locale)
            date.locale(this.locale);
        return date;
    };
    /**
     * Generate an Array of CalendarDay representing a month to display,
     * with extra days from previous and next month to get plain weeks.
     * @param  {number}        month
     * @param  {number}        year
     * @param  {boolean}       showSixWeek true if we should always returns 6 weeks,
     * this will avoid calendar to change size depending on month displayed.
     * @return {CalendarDay[]}             Array of CalendarDay representing a month to display
     */
    DatePickerTemplate.prototype.generateCalendarDays = function (date) {
        var today = moment();
        //start date
        var itDate = this.applyLocale(date.clone());
        itDate.subtract(itDate.weekday(), 'd');
        //end date
        var endDate = this.applyLocale(date.clone().endOf('month'));
        endDate.add(6 - endDate.weekday(), 'd');
        if (this.showSixWeek) {
            var nbWeeks = endDate.diff(itDate, 'weeks');
            if (nbWeeks < 5)
                endDate.add(5 - nbWeeks, 'weeks');
        }
        var days = [];
        while (itDate.isBefore(endDate)) {
            days.push({
                date: itDate.clone(),
                state: this.select.getDateState(itDate),
                isToday: today.isSame(itDate, 'day'),
                isCurrDisplayMonth: itDate.month() == date.month()
            });
            itDate = itDate.add(1, 'd');
        }
        return days;
    };
    DatePickerTemplate.prototype.updateCalendarDays = function () {
        for (var _i = 0, _a = this.months; _i < _a.length; _i++) {
            var m = _a[_i];
            var days = m.days;
            for (var i = 0, l = days.length; i < l; i++) {
                var day = days[i], state = this.select.getDateState(day.date);
                if (day.state != state) {
                    days[i] = {
                        date: day.date,
                        isToday: day.isToday,
                        isCurrDisplayMonth: day.isCurrDisplayMonth,
                        state: state
                    };
                }
            }
        }
        this.cd.markForCheck();
    };
    DatePickerTemplate.prototype.newMonth = function (date) {
        var monthDate = moment([date.year(), date.month()]);
        return {
            date: monthDate,
            days: this.generateCalendarDays(monthDate)
        };
    };
    DatePickerTemplate.prototype.initMonths = function () {
        var _this = this;
        var dates = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            dates[_i - 0] = arguments[_i];
        }
        this.months = dates.map(function (d) { return _this.newMonth(d); });
        this.cd.markForCheck();
    };
    DatePickerTemplate.prototype.setMonth = function (date, idx) {
        if (idx === void 0) { idx = 0; }
        this.months[idx] = this.newMonth(date);
        this.cd.markForCheck();
    };
    return DatePickerTemplate;
}());

var DatePickerIonicComponent = (function (_super) {
    __extends(DatePickerIonicComponent, _super);
    function DatePickerIonicComponent(renderer, elRef, cd, select) {
        var _this = this;
        _super.call(this, cd, select);
        this._class = DatePickerIonicComponent.CONTAINER_CLASS;
        /*@Input()*/ this.opened = false;
        /*@Input()*/ this.viewFormat = 'LL';
        this.el = elRef.nativeElement;
        renderer.listenGlobal('window', 'click', function (e) {
            if (_this.opened &&
                e.target &&
                _this.el !== e.target &&
                !_this.el.contains(e.target))
                _this.close();
        });
    }
    DatePickerIonicComponent.extendConfig = function (config, componentClass) {
        var a = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            a[_i - 2] = arguments[_i];
        }
        return extendConfig(_super.extendConfig.call(this, {
            templateUrl: './ionic.component.html',
            styleUrls: ['ionic.css'],
            inputs: ['class', 'expanded', 'opened', 'viewFormat']
        }, componentClass), config);
    };
    Object.defineProperty(DatePickerIonicComponent.prototype, "class", {
        /*@Input()*/
        get: function () {
            return this._class;
        },
        set: function (classStr) {
            this._class = DatePickerIonicComponent.CONTAINER_CLASS + ' ' + classStr;
        },
        enumerable: true,
        configurable: true
    });
    DatePickerIonicComponent.prototype.ngOnInit = function () {
        this.initMonths(moment());
    };
    DatePickerIonicComponent.prototype.onDateclick = function (e, day) {
        e.preventDefault();
        if (day.date.isSame(this.month.date, 'M')) {
            this.select.selectDate(day.date);
            this.close();
        }
    };
    DatePickerIonicComponent.prototype.nextMonth = function () {
        this.setMonth(this.month.date.add(1, 'M'));
    };
    DatePickerIonicComponent.prototype.prevMonth = function () {
        this.setMonth(this.month.date.subtract(1, 'M'));
    };
    DatePickerIonicComponent.prototype.toggle = function () {
        this.opened = !this.opened;
    };
    DatePickerIonicComponent.prototype.open = function () {
        this.opened = true;
    };
    DatePickerIonicComponent.prototype.close = function () {
        this.opened = false;
    };
    DatePickerIonicComponent.prototype.inputClick = function () {
        this.onTouchedCallback();
        this.toggle();
    };
    DatePickerIonicComponent.CONTAINER_CLASS = 'ui-kit-calendar-container';
    DatePickerIonicComponent = __decorate([
        _angular_core.Component(DatePickerIonicComponent.extendConfig({
            selector: 'datepicker-ionic'
        }, DatePickerIonicComponent)), 
        __metadata('design:paramtypes', [(typeof (_a = typeof _angular_core.Renderer !== 'undefined' && _angular_core.Renderer) === 'function' && _a) || Object, (typeof (_b = typeof _angular_core.ElementRef !== 'undefined' && _angular_core.ElementRef) === 'function' && _b) || Object, (typeof (_c = typeof _angular_core.ChangeDetectorRef !== 'undefined' && _angular_core.ChangeDetectorRef) === 'function' && _c) || Object, (typeof (_d = typeof BaseSelect !== 'undefined' && BaseSelect) === 'function' && _d) || Object])
    ], DatePickerIonicComponent);
    return DatePickerIonicComponent;
    var _a, _b, _c, _d;
}(DatePickerTemplate));

var SingleSelectDirective = (function (_super) {
    __extends(SingleSelectDirective, _super);
    function SingleSelectDirective() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(SingleSelectDirective.prototype, "EMPTY_VALUE", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    
    SingleSelectDirective.prototype.setValue = function (value) {
        if (!value || this.isDateValid(value))
            this.value = value;
    };
    SingleSelectDirective.prototype.ngOnChanges = function (changes) {
        if (!this.isDateValid(this.value))
            this.value = null;
    };
    SingleSelectDirective.prototype.selectDate = function (date) {
        if (!this.isDateSelectable(date))
            return false;
        this.value = date;
        return true;
    };
    SingleSelectDirective.prototype.unselectDate = function (date) {
        if (this.isDateSelected(date)) {
            this.value = null;
            return true;
        }
        return false;
    };
    SingleSelectDirective.prototype.isDateSelected = function (date) {
        return isSameDay(date, this.value);
    };
    SingleSelectDirective.prototype.isDateInSelectRange = function (date) {
        return this.isDateSelected(date);
    };
    SingleSelectDirective = __decorate([
        _angular_core.Directive(BaseSelect.extendConfig({
            selector: '[singleSelect]'
        }, SingleSelectDirective)), 
        __metadata('design:paramtypes', [])
    ], SingleSelectDirective);
    return SingleSelectDirective;
}(BaseSelect));

var MultiSelectDirective = (function (_super) {
    __extends(MultiSelectDirective, _super);
    function MultiSelectDirective() {
        _super.apply(this, arguments);
        this._limit = Infinity;
    }
    Object.defineProperty(MultiSelectDirective.prototype, "EMPTY_VALUE", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiSelectDirective.prototype, "limit", {
        get: function () {
            return this._limit;
        },
        set: function (limit) {
            this._limit = limit;
        },
        enumerable: true,
        configurable: true
    });
    MultiSelectDirective.prototype.setValue = function (dates) {
        var _this = this;
        if (dates != this.value) {
            this.value = (dates || [])
                .filter(function (d) { return _this.isDateValid(d); })
                .splice(0, dates.length - this.limit)
                .map(function (d) { return _this.getDay(d); })
                .sort(function (a, b) { return a - b; });
        }
    };
    MultiSelectDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        var value = this.value;
        if (changes['minDate'] || changes['maxDate']) {
            var newValue = value.filter(function (d) { return _this.isDateValid(d); });
            if (newValue.length < value.length)
                value = newValue;
        }
        if (changes['limit'] && value.length > this.limit)
            value = value.slice(0, this.limit);
        this.value = value;
    };
    MultiSelectDirective.prototype.selectDate = function (date) {
        if (!this.isDateSelectable(date))
            return false;
        if (this.value.length < this.limit)
            this.value = this.value.concat([date])
                .sort(function (a, b) { return a - b; });
        else
            this.value = [date];
    };
    MultiSelectDirective.prototype.unselectDate = function (date) {
        var newValue = this.value.filter(function (d) { return !isSameDay(d, date); });
        if (newValue.length < this.value.length) {
            this.value = newValue;
            return true;
        }
        return false;
    };
    MultiSelectDirective.prototype.isDateSelected = function (date) {
        return !!this.value.find(function (d) { return isSameDay(d, date); });
    };
    MultiSelectDirective.prototype.isDateInSelectRange = function (date) {
        return this.value.length > 1 &&
            date.isBetween(this.value[0], this.value[this.value.length - 1], 'day', '[]');
    };
    __decorate([
        _angular_core.Input('multiSelect'), 
        __metadata('design:type', Object)
    ], MultiSelectDirective.prototype, "limit", null);
    MultiSelectDirective = __decorate([
        _angular_core.Directive(BaseSelect.extendConfig({
            selector: '[multiSelect]'
        }, MultiSelectDirective)), 
        __metadata('design:paramtypes', [])
    ], MultiSelectDirective);
    return MultiSelectDirective;
}(BaseSelect));

var RangeDateImpl = (function () {
    function RangeDateImpl(rangeDate, onchange) {
        this.onChange = function (v) { };
        this.start = rangeDate.start;
        this.end = rangeDate.end;
        this.onChange = onchange;
    }
    Object.defineProperty(RangeDateImpl.prototype, "start", {
        get: function () {
            return this._start;
        },
        set: function (date) {
            this._start = date;
            this.onChange(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeDateImpl.prototype, "end", {
        get: function () {
            return this._end;
        },
        set: function (date) {
            this._end = date;
            this.onChange(this);
        },
        enumerable: true,
        configurable: true
    });
    return RangeDateImpl;
}());
var RangeSelectDirective = (function (_super) {
    __extends(RangeSelectDirective, _super);
    function RangeSelectDirective() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(RangeSelectDirective.prototype, "EMPTY_VALUE", {
        get: function () {
            return {
                start: null,
                end: null
            };
        },
        enumerable: true,
        configurable: true
    });
    
    RangeSelectDirective.prototype.setValue = function (value) {
        var _this = this;
        if (value !== this.value) {
            if (!this.isDateValid(value.start))
                value.start = null;
            if (!this.isDateValid(value.end))
                value.end = null;
            this.value = new RangeDateImpl(value, function (v) {
                _this.onDateChange.emit(v);
                _this.hasStateChanged = true;
            });
        }
    };
    RangeSelectDirective.prototype.ngOnChanges = function (changes) {
        var start = this.value.start, end = this.value.end;
        if (!this.isDateValid(this.value.start))
            start = null;
        if (!this.isDateValid(this.value.end))
            end = null;
        if (start !== this.value.start || end !== this.value.end)
            this.value = {
                start: start,
                end: end
            };
    };
    RangeSelectDirective.prototype.selectDate = function (date) {
        if (!this.isDateSelectable(date))
            return false;
        if (!this.value.start)
            this.value.start = date;
        else if (!this.value.end)
            this.value.end = date;
        else {
            var diffStart = Math.abs(date.diff(this.value.start));
            var diffEnd = Math.abs(date.diff(this.value.end));
            if (diffStart < diffEnd)
                this.value.start = date;
            else
                this.value.end = date;
        }
        return true;
    };
    RangeSelectDirective.prototype.unselectDate = function (date) {
        if (date) {
            if (isSameDay(date, this.value.start)) {
                this.value.start = null;
                return true;
            }
            if (isSameDay(date, this.value.end)) {
                this.value.end = null;
                return true;
            }
        }
        return false;
    };
    RangeSelectDirective.prototype.isDateSelected = function (date) {
        return date && (isSameDay(date, this.value.start) || isSameDay(date, this.value.end));
    };
    RangeSelectDirective.prototype.isDateInSelectRange = function (date) {
        var start = this.value.start, end = this.value.end;
        return start && end &&
            date.isSameOrAfter(start, 'd') &&
            date.isSameOrBefore(end, 'd');
    };
    RangeSelectDirective = __decorate([
        _angular_core.Directive(BaseSelect.extendConfig({
            selector: '[rangeSelect]'
        }, RangeSelectDirective)), 
        __metadata('design:paramtypes', [])
    ], RangeSelectDirective);
    return RangeSelectDirective;
}(BaseSelect));

var MomentFormatPipe = (function () {
    function MomentFormatPipe() {
    }
    MomentFormatPipe.prototype.transform = function (date, format, locale) {
        //this short version cause trouble to typescript
        //let d = (date && date instanceof moment.Moment[]) ? date[0] : date
        if (format === void 0) { format = 'LL'; }
        var d;
        if (date && date instanceof Array)
            d = date[0];
        else
            d = date;
        if (!d)
            return '';
        if (locale) {
            d = moment(d);
            d.locale(locale);
        }
        return d.format(format);
    };
    MomentFormatPipe = __decorate([
        _angular_core.Pipe({
            name: 'momentFormat'
        }), 
        __metadata('design:paramtypes', [])
    ], MomentFormatPipe);
    return MomentFormatPipe;
}());

var DayClassesPipe = (function () {
    function DayClassesPipe() {
    }
    DayClassesPipe.prototype.transform = function (day) {
        var classes = {
            enabled: false,
            inRange: false,
            selected: false,
            today: day.isToday,
            currDisplayMonth: day.isCurrDisplayMonth
        };
        if (day.state > exports.DateState.disabled)
            classes[exports.DateState[day.state]] = true;
        return classes;
    };
    DayClassesPipe = __decorate([
        _angular_core.Pipe({
            name: 'dayClasses'
        }), 
        __metadata('design:paramtypes', [])
    ], DayClassesPipe);
    return DayClassesPipe;
}());

var decl_exports = [
    DatePickerIonicComponent,
    SingleSelectDirective,
    MultiSelectDirective,
    RangeSelectDirective,
    MomentFormatPipe,
    DayClassesPipe
];
var DatePickerModule = (function () {
    function DatePickerModule() {
    }
    DatePickerModule = __decorate([
        _angular_core.NgModule({
            imports: [
                _angular_common.CommonModule,
                _angular_platformBrowser.BrowserModule,
                _angular_forms.FormsModule
            ],
            declarations: decl_exports,
            exports: decl_exports
        }), 
        __metadata('design:paramtypes', [])
    ], DatePickerModule);
    return DatePickerModule;
}());

exports.DatePickerModule = DatePickerModule;
exports.BaseSelect = BaseSelect;
exports.SingleSelectDirective = SingleSelectDirective;
exports.MultiSelectDirective = MultiSelectDirective;
exports.RangeSelectDirective = RangeSelectDirective;
exports.DatePickerTemplate = DatePickerTemplate;
exports.DatePickerIonicComponent = DatePickerIonicComponent;
exports.extendDirConfig = extendDirConfig;
exports.extendConfig = extendConfig;
exports.formProvider = formProvider;
exports.selectProvider = selectProvider;

Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng2-datepicker.umd.js.map
